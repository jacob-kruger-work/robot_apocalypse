<h2>Robot apocalypse RESTFul API of sorts</h2>
<div>This offers ability to add new survivor records, including their inventory and GPS coordinates, along with the ID number to identify them later on.</div>
<div>Will explain various relative URL paths below, along with data requests they can handle.  But initially will explain file structures in terms of the django web-framework project.</div>
<h3>File structures</h3>
<div>Under this repo you will find requirements.txt, which will help you configure your python virtual environment - pip install -r requirements.txt - I was working on this using python 3.9.5</div>
<div>Then, inside robot_apocalypse, the following folders are specifically relevant:<br>
<ul>
<li>database - contains both the sqlite3 .db file, which the whole project operates off of, as well as a python script file called create_database.py, which would otherwise create the database file, and generate table data structures, as well as populating the initial robots database from either a remote source, or else, if that fails, local robots.json.</li>
<li>logs - this contains another sqlite3 database that I use to save exception history in so that, if the site is running remotely, or invisibly, I can still track down errors/exceptions etc. later on.</li>
<li>static - this is just a placeholder, for now since the static path gets referred to in the main project settings.py file.?</li>
<li>testing - this folder contains my own command line test.py script to allow you to run test requests against project when it's running - simple, but, just a basic test, in case.</li>
<li>robot_apocalypse - main project folder, with all source code under it -<ul>
<li>actions - folder contains sub-modules for robots and survivors, each containing functions that get made use of to work with data, logic, interaction, etc. in those contexts - main actual logic in these files, with forms of commenting included in all code blocks.</li>
<li>apocalypse_models.py - this file is a slightly tweaked version of something generated using the sqlacodegen module, which generates ORM data models to then be used when working with sqlalchemy to handle data processing.</li>
<li>db.py - this offers basic connection - engine and session initialisation, as well as a couple of otehr functions use at times when processing data for both input and output.</li>
<li>settings.py - the standard django settings configuration, but, tweak it slightly to include soem of my own ifno.</li>
<li>sql_log.py - my code to handle logging un-read exception data to an sqlite3 database, for later review.</li>
<li>urls.py - standard django file that contains the urlpatterns collection, specifying relative paths to interact with specific pieces of code.</li>
<li>views.py - most of the interaction processing code is included in this file, which processes input data, reroutes it to code under .actions/, etc. and then responds to client with various forms of output.</li>
</ul></li>
</ul></div>
<h3>URLs that have been specified</h3>
<div>These URLs are specified in the urlpatterns collection inside urls.py.<br>
<ul>
<li>robots - targets views.list_robots - just renders output of all robot entries in database.</li>
<li>survivors - also just renders output of all survivor data, but, including a dict as primary output, which then contains key-value pairs for numbers, percentages, etc., as well as different lists of survivor records, which are then rendering as dicts, with relative data included in all of them.</li>
<li>add - routes to views.add_survivor function, which takes following arguments to then process insertion of a survivor record into database:<ul>
<li>name - required, plain string value</li>
<li>age - simple integer value</li>
<li>gender - simple string value</li>
<li>id_number - string value, required and used later on to identify survivor - must be unique</li>
<li>latitude - floating point value</li>
<li>longitude - floating point value</li>
<li>inventory - string value processed from format of item|number||item2|number2||...</li>
</ul></li>
<li>flag - used to flag a survivor as possibly infected, routing post request to views.flag_survivor - and requires following two values:<ul>
<li>reporting - ID number of survivor reporting another as infected.</li>
<li>infected - ID number of survivor being reported as infected - 3 flaggings will then mark a survivor as definitely having been infected.</li>
</ul></li>
<li>gps - allows a survivor to update their current GPS coordinates - following values/arguments are made use of, and this is processed by views.gps_coordinates:<ul>
<li>id_number - ID number to identify which primary record to update.</li>
<li>latitude - floating point value.</li>
<li>longitude - floating point value.</li>
</ul></li>
</ul></div>